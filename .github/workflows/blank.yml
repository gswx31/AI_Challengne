name: Create Flutter Project

on:
  workflow_dispatch:

jobs:
  create-flutter-project:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create project files
        run: |
          # pubspec.yaml 생성
          cat > pubspec.yaml << 'EOF'
name: parttime_search_app
description: 알바몬 검색 결과 화면 예제 (Flutter + Riverpod)
publish_to: "none"

environment:
  sdk: ">=2.18.0 <4.0.0"

dependencies:
  flutter:
    sdk: flutter
  flutter_riverpod: ^2.3.6
  intl: ^0.18.1

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0
EOF

          mkdir -p lib/core/theme lib/models lib/data lib/features/home/state lib/features/home/presentation lib/widgets lib/features/detail

          # lib/main.dart
          cat > lib/main.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'app.dart';

void main() {
  runApp(const ProviderScope(child: MyApp()));
}
EOF

          # lib/app.dart
          cat > lib/app.dart << 'EOF'
import 'package:flutter/material.dart';
import 'core/theme/app_theme.dart';
import 'features/home/presentation/home_screen.dart';

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '알바 검색 (Demo)',
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme,
      home: const HomeScreen(),
    );
  }
}
EOF

          # lib/core/theme/app_theme.dart
          cat > lib/core/theme/app_theme.dart << 'EOF'
import 'package:flutter/material.dart';

class AppTheme {
  static const Color primaryYellow = Color(0xFFFFC000);
  static const Color accentBlue = Color(0xFF4A90E2);
  static final ThemeData lightTheme = ThemeData(
    brightness: Brightness.light,
    primaryColor: primaryYellow,
    scaffoldBackgroundColor: const Color(0xFFF8F8F8),
    appBarTheme: const AppBarTheme(
      backgroundColor: Colors.white,
      foregroundColor: Colors.black87,
      elevation: 0,
      centerTitle: true,
    ),
    floatingActionButtonTheme: const FloatingActionButtonThemeData(
      backgroundColor: primaryYellow,
    ),
  );

  static final ThemeData darkTheme = ThemeData.dark();
}
EOF

          # lib/models/job.dart
          cat > lib/models/job.dart << 'EOF'
class Job {
  final String id;
  final String title;
  final String companyName;
  final String payType; // '시급', '월급' 등
  final String payAmount; // '9,860원' 등
  final String location;
  final String deadline; // 'D-3' 등
  final String jobDescription;
  final DateTime postedAt;
  bool isScraped;

  Job({
    required this.id,
    required this.title,
    required this.companyName,
    required this.payType,
    required this.payAmount,
    required this.location,
    required this.deadline,
    this.jobDescription = '상세 내용은 여기에 표시됩니다.',
    DateTime? postedAt,
    this.isScraped = false,
  }) : postedAt = postedAt ?? DateTime.now();

  Job copyWith({bool? isScraped}) {
    return Job(
      id: id,
      title: title,
      companyName: companyName,
      payType: payType,
      payAmount: payAmount,
      location: location,
      deadline: deadline,
      jobDescription: jobDescription,
      postedAt: postedAt,
      isScraped: isScraped ?? this.isScraped,
    );
  }
}
EOF

          # lib/data/mock_service.dart
          cat > lib/data/mock_service.dart << 'EOF'
import '../models/job.dart';

/// 모의 데이터 제공. 실제 API가 준비되면 service 계층만 교체하면 됩니다.
class MockJobService {
  // 기본 더미 생성 함수
  static List<Job> generateJobs({required int start, required int count, String keyword = '알바'}) {
    return List.generate(count, (i) {
      final idx = start + i;
      final daysLeft = (idx % 7) + 1; // D-1..D-7
      return Job(
        id: 'job_$idx',
        title: '$keyword 모집 공고 #$idx',
        companyName: '회사명 $idx',
        payType: '시급',
        payAmount: '${10000 + (idx % 5) * 500}원',
        location: ['서울 강남구', '서울 마포구', '부산 해운대구'][idx % 3],
        deadline: 'D-$daysLeft',
        jobDescription: '이 포지션은 $idx 번 채용 공고의 상세 설명입니다. 업무 내용, 자격 요건 등.',
        isScraped: idx % 6 == 0,
      );
    });
  }
}
EOF

          # lib/features/home/state/job_list_provider.dart
          cat > lib/features/home/state/job_list_provider.dart << 'EOF'
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../models/job.dart';
import '../../../data/mock_service.dart';

final jobListProvider = StateNotifierProvider<JobListNotifier, AsyncValue<List<Job>>>(
  (ref) => JobListNotifier(),
);

class JobListNotifier extends StateNotifier<AsyncValue<List<Job>>> {
  JobListNotifier() : super(const AsyncValue.loading()) {
    // 초기 데이터 로드
    loadInitial();
  }

  int _loaded = 0;
  final int _pageSize = 15;
  bool _isLoadingMore = false;

  Future<void> loadInitial({String keyword = '알바'}) async {
    try {
      state = const AsyncValue.loading();
      await Future.delayed(const Duration(milliseconds: 600));
      final data = MockJobService.generateJobs(start: 0, count: _pageSize, keyword: keyword);
      _loaded = data.length;
      state = AsyncValue.data(data);
    } catch (e, st) {
      state = AsyncValue.error(e, st);
    }
  }

  Future<void> loadMore({String keyword = '알바'}) async {
    if (_isLoadingMore) return;
    _isLoadingMore = true;
    try {
      await Future.delayed(const Duration(milliseconds: 800));
      final more = MockJobService.generateJobs(start: _loaded, count: _pageSize, keyword: keyword);
      _loaded += more.length;
      final current = state.value ?? [];
      state = AsyncValue.data([...current, ...more]);
    } catch (e, st) {
      state = AsyncValue.error(e, st);
    } finally {
      _isLoadingMore = false;
    }
  }

  void toggleScrap(String jobId) {
    final list = state.value;
    if (list == null) return;
    final changed = list.map((j) {
      if (j.id == jobId) return j.copyWith(isScraped: !j.isScraped);
      return j;
    }).toList();
    state = AsyncValue.data(changed);
  }

  Future<void> refresh({String keyword = '알바'}) async {
    _loaded = 0;
    await loadInitial(keyword: keyword);
  }
}
EOF

          # lib/features/home/presentation/home_screen.dart
          cat > lib/features/home/presentation/home_screen.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../state/job_list_provider.dart';
import '../../../widgets/job_card.dart';
import '../../../widgets/filter_bottom_sheet.dart';
import '../../detail/job_detail_screen.dart';
import '../../../models/job.dart';

class HomeScreen extends ConsumerStatefulWidget {
  const HomeScreen({super.key});

  @override
  ConsumerState<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends ConsumerState<HomeScreen> {
  final TextEditingController _searchController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  String _currentKeyword = '알바';

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_onScroll);
  }

  void _onScroll() {
    if (_scrollController.position.pixels >
        _scrollController.position.maxScrollExtent - 300) {
      // near bottom
      ref.read(jobListProvider.notifier).loadMore(keyword: _currentKeyword);
    }
  }

  void _onSearch() {
    setState(() {
      _currentKeyword = _searchController.text.trim().isEmpty ? '알바' : _searchController.text.trim();
    });
    ref.read(jobListProvider.notifier).loadInitial(keyword: _currentKeyword);
  }

  @override
  void dispose() {
    _searchController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final jobListAsync = ref.watch(jobListProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('검색'),
        backgroundColor: Colors.white,
        elevation: 1,
        actions: [
          IconButton(
            onPressed: () => showModalBottomSheet(
              context: context,
              isScrollControlled: true,
              builder: (_) => const FilterBottomSheet(),
            ),
            icon: const Icon(Icons.filter_list),
            tooltip: '필터',
          ),
        ],
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          child: Column(
            children: [
              // Search bar
              Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: _searchController,
                      decoration: InputDecoration(
                        hintText: '직무명·지역·회사명으로 검색',
                        filled: true,
                        fillColor: Colors.white,
                        contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide.none,
                        ),
                        prefixIcon: const Icon(Icons.search),
                      ),
                      onSubmitted: (_) => _onSearch(),
                    ),
                  ),
                  const SizedBox(width: 8),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFFFFC000),
                      padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 12),
                    ),
                    onPressed: _onSearch,
                    child: const Text('검색', style: TextStyle(color: Colors.black87)),
                  )
                ],
              ),
              const SizedBox(height: 12),
              // List area
              Expanded(
                child: jobListAsync.when(
                  data: (items) => RefreshIndicator(
                    onRefresh: () => ref.read(jobListProvider.notifier).refresh(keyword: _currentKeyword),
                    child: ListView.builder(
                      controller: _scrollController,
                      itemCount: items.length + 1,
                      itemBuilder: (context, idx) {
                        if (idx == items.length) {
                          // loader at bottom
                          return const Padding(
                            padding: EdgeInsets.symmetric(vertical: 18),
                            child: Center(child: CircularProgressIndicator()),
                          );
                        }
                        final job = items[idx];
                        return JobCard(
                          job: job,
                          onTap: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (_) => JobDetailScreen(job: job),
                              ),
                            );
                          },
                          onScrapToggle: (id) {
                            ref.read(jobListProvider.notifier).toggleScrap(id);
                          },
                        );
                      },
                    ),
                  ),
                  loading: () => ListView.builder(
                    itemCount: 6,
                    itemBuilder: (context, i) => const Padding(
                      padding: EdgeInsets.symmetric(vertical: 8),
                      child: _SkeletonCard(),
                    ),
                  ),
                  error: (e, st) => Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Text('데이터를 불러오지 못했습니다.'),
                        const SizedBox(height: 8),
                        ElevatedButton(
                          onPressed: () => ref.read(jobListProvider.notifier).loadInitial(keyword: _currentKeyword),
                          child: const Text('다시 시도'),
                        )
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: 1,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home_outlined), label: '홈'),
          BottomNavigationBarItem(icon: Icon(Icons.search), label: '검색'),
          BottomNavigationBarItem(icon: Icon(Icons.person_outline), label: '마이페이지'),
        ],
      ),
    );
  }
}

class _SkeletonCard extends StatelessWidget {
  const _SkeletonCard({super.key});
  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 0),
      padding: const EdgeInsets.all(14),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
      ),
      child: Row(
        children: [
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(height: 16, width: 180, color: Colors.grey.shade300),
                const SizedBox(height: 8),
                Container(height: 12, width: 120, color: Colors.grey.shade300),
                const SizedBox(height: 8),
                Container(height: 12, width: 220, color: Colors.grey.shade300),
              ],
            ),
          ),
          const SizedBox(width: 12),
          Container(width: 36, height: 36, color: Colors.grey.shade300),
        ],
      ),
    );
  }
}
EOF

          # lib/widgets/job_card.dart
          cat > lib/widgets/job_card.dart << 'EOF'
import 'package:flutter/material.dart';
import '../models/job.dart';

class JobCard extends StatefulWidget {
  final Job job;
  final VoidCallback onTap;
  final void Function(String jobId)? onScrapToggle;

  const JobCard({
    Key? key,
    required this.job,
    required this.onTap,
    this.onScrapToggle,
  }) : super(key: key);

  @override
  State<JobCard> createState() => _JobCardState();
}

class _JobCardState extends State<JobCard> with SingleTickerProviderStateMixin {
  late bool _isScraped;
  late AnimationController _animController;

  @override
  void initState() {
    super.initState();
    _isScraped = widget.job.isScraped;
    _animController = AnimationController(vsync: this, duration: const Duration(milliseconds: 260), lowerBound: 0.8, upperBound: 1.0);
    _animController.value = _isScraped ? 1.0 : 0.8;
  }

  @override
  void didUpdateWidget(covariant JobCard oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.job.isScraped != widget.job.isScraped) {
      _isScraped = widget.job.isScraped;
      _animController.animateTo(_isScraped ? 1.0 : 0.8);
    }
  }

  void _toggleScrap() {
    setState(() {
      _isScraped = !_isScraped;
      if (_isScraped) {
        _animController.forward();
      } else {
        _animController.reverse();
      }
    });
    widget.onScrapToggle?.call(widget.job.id);
  }

  Color _deadlineColor(String deadline) {
    if (deadline.startsWith('D-')) {
      final days = int.tryParse(deadline.replaceFirst('D-', '')) ?? 99;
      if (days <= 3) return Colors.red;
    }
    return Colors.black87;
  }

  @override
  void dispose() {
    _animController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: widget.onTap,
      borderRadius: BorderRadius.circular(12),
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 8),
        padding: const EdgeInsets.all(14),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [BoxShadow(color: Colors.black12.withOpacity(0.04), blurRadius: 8, offset: const Offset(0,3))],
        ),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // left: main text
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(widget.job.title, style: const TextStyle(fontSize: 17, fontWeight: FontWeight.w600)),
                  const SizedBox(height: 6),
                  Text('${widget.job.companyName} · ${widget.job.location}', style: const TextStyle(fontSize: 13, color: Colors.black54)),
                  const SizedBox(height: 6),
                  Row(
                    children: [
                      Text('${widget.job.payType} ${widget.job.payAmount}', style: const TextStyle(fontSize: 14, color: Colors.black87)),
                      const SizedBox(width: 20),
                      Text(widget.job.deadline, style: TextStyle(color: _deadlineColor(widget.job.deadline), fontWeight: FontWeight.w600)),
                    ],
                  )
                ],
              ),
            ),
            // right: scrap icon
            GestureDetector(
              onTap: () {
                _toggleScrap();
              },
              child: ScaleTransition(
                scale: _animController,
                child: Icon(
                  _isScraped ? Icons.bookmark : Icons.bookmark_border,
                  color: _isScraped ? Colors.amber : Colors.grey,
                  size: 28,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
EOF

          # lib/widgets/filter_bottom_sheet.dart
          cat > lib/widgets/filter_bottom_sheet.dart << 'EOF'
import 'package:flutter/material.dart';

class FilterBottomSheet extends StatelessWidget {
  const FilterBottomSheet({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 24),
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 48,
            height: 4,
            decoration: BoxDecoration(
              color: Colors.grey.shade300,
              borderRadius: BorderRadius.circular(20),
            ),
          ),
          const SizedBox(height: 18),
          const Text('필터 (예시)', style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600)),
          const SizedBox(height: 12),
          // 간단한 체크박스 예시
          Row(
            children: [
              Checkbox(value: false, onChanged: (_) {}),
              const Text('시급만 보기'),
            ],
          ),
          Row(
            children: [
              Checkbox(value: false, onChanged: (_) {}),
              const Text('월급만 보기'),
            ],
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
            },
            style: ElevatedButton.styleFrom(backgroundColor: const Color(0xFFFFC000)),
            child: const Text('적용', style: TextStyle(color: Colors.black87)),
          )
        ],
      ),
    );
  }
}
EOF

          # lib/features/detail/job_detail_screen.dart
          cat > lib/features/detail/job_detail_screen.dart << 'EOF'
import 'package:flutter/material.dart';
import '../../models/job.dart';

class JobDetailScreen extends StatelessWidget {
  final Job job;
  const JobDetailScreen({super.key, required this.job});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(job.title),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black87,
        elevation: 1,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: ListView(
          children: [
            Text(job.title, style: const TextStyle(fontSize: 20, fontWeight: FontWeight.w700)),
            const SizedBox(height: 8),
            Text('${job.companyName} · ${job.location}', style: const TextStyle(fontSize: 16, color: Colors.black54)),
            const SizedBox(height: 12),
            Text('급여: ${job.payType} ${job.payAmount}', style: const TextStyle(fontSize: 16)),
            const SizedBox(height: 12),
            Text(job.jobDescription, style: const TextStyle(fontSize: 15)),
            const SizedBox(height: 20),
            Text('마감일: ${job.deadline}', style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 14, color: Colors.red)),
          ],
        ),
      ),
    );
  }
}
EOF

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Auto: Create Flutter project base files"
          git push origin HEAD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
